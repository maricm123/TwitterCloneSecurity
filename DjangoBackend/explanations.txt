
*** KAKO FUNKCIONISE LOGOUT OVDE ***
SIMPLE_JWT = {
    'REFRESH_TOKEN_LIFETIME': timedelta(days=15),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True
}|------------|-----------------------------------------------------|
| ACTION     | DESCRIPTION                                         |
|------------|-----------------------------------------------------|
|  LOGIN     | - Refresh token is added automaticaly to            |
|            | outstanding tokens                                  |
|------------|-----------------------------------------------------|
|  LOGOUT    | - You should add refresh token to the blacklisted   |
|            | tokens manually.                                    |
|------------|-----------------------------------------------------|
|  REFRESH   | - Old refresh token is added automaticaly to        |
|            | blacklisted tokens.                                 |
|            | - You should add new refresh token to the           |
|            | outstanding tokens                                  |
|------------|-----------------------------------------------------|

REFRESH_TOKEN_LIFETIME: This sets the amount of time that a refresh token is valid for. In this case, refresh tokens will be valid for 15 days.

ROTATE_REFRESH_TOKENS: When this is set to True, each time a refresh token is used to obtain a new access token, the refresh token will be rotated
(i.e. a new refresh token will be issued). This is a security measure to prevent long-term use of the same refresh token.

BLACKLIST_AFTER_ROTATION: When this is set to True, after a refresh token has been rotated,
the previous refresh token (which is no longer valid) will be added to a blacklist.
This ensures that even if a previous refresh token is somehow obtained by an attacker, it cannot be used to obtain a new access token.


***Outstanding tokens*** refer to valid and authorized tokens that have been issued to users and have not yet expired or been revoked. 
These tokens allow users to access certain resources or perform certain actions based on their privileges.

On the other hand, ***blacklisted tokens*** are tokens that have been revoked or invalidated,
either because they have been compromised, or because the associated user's access rights have been changed or terminated.
***Blacklisted tokens*** are no longer valid and cannot be used to access any resources or perform any actions.

In summary, ***outstanding tokens*** are valid and authorized tokens that allow users to access resources,
while ***blacklisted tokens*** are invalid and unauthorized tokens that have been revoked or invalidated.







{
"refresh":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY4MjM0MjkwOSwiaWF0IjoxNjgxMDQ2OTA5LCJqdGkiOiJkNGJjZjM0OWIyNjg0NWI2YTc0ZTI5NTFlZGJhMTIzNiIsInVzZXJfaWQiOjI1fQ.UWAP6g6oUMD5RaB8xHhq1g9sAQmVw3EhToTPYqw_zus"
}

(XSS ATTACKS)
Additionally, storing tokens in localStorage also exposes them to Cross-Site Scripting (XSS) attacks.
An attacker could exploit a vulnerability in your application to execute malicious code in a user's browser,
which could then access and steal the tokens from localStorage.

To mitigate these risks,
it is recommended to store tokens in an HTTP-only cookie with the secure flag set.
This ensures that the tokens are only accessible via HTTP requests,
and cannot be accessed by JavaScript running on the page.
https://www.procoding.org/jwt-token-as-httponly-cookie-in-django/


















Yes, you can override any of the methods in RetrieveUpdateDestroyAPIView if you need to customize the behavior of the view. Here are the methods that can be overridden and their respective HTTP methods:

get() (HTTP GET): retrieves a single object.
put() (HTTP PUT): updates a single object.
patch() (HTTP PATCH): partially updates a single object.
delete() (HTTP DELETE): deletes a single object.
To override one or more of these methods, you can define a new method with the same name in your view subclass. For example, if you want to customize the delete() method in TweetDetail, you can define a new method like this:

python
Copy code
class TweetDetail(generics.RetrieveUpdateDestroyAPIView):
    # ... serializer_class, queryset, etc. ...

    def delete(self, request, *args, **kwargs):
        # Custom deletion logic goes here...
        return self.destroy(request, *args, **kwargs)
In this example, we've defined a new delete() method that overrides the default behavior of DestroyAPIView. We've included a comment indicating that custom deletion logic should be added here, and we've called the superclass's destroy() method at the end to perform the actual deletion of the object from the database.

Similarly, you can override the get(), put(), or patch() methods if you need to customize the behavior of those HTTP methods for your view.